// Code generated by apigen; DO NOT EDIT.
// github.com/ktr0731/apigen

package main

import (
	"context"
	"fmt"
	"net/url"

	"github.com/ktr0731/apigen/client"
)

type DummyClient interface {
	CreatePost(ctx context.Context, req *CreatePostRequest) (*CreatePostResponse, error)
	DeletePost(ctx context.Context, req *DeletePostRequest) (*DeletePostResponse, error)
	GetPost(ctx context.Context, req *GetPostRequest) (*GetPostResponse, error)
	ListPosts(ctx context.Context, req *ListPostsRequest) (*ListPostsResponse, error)
	UpdatePost(ctx context.Context, req *UpdatePostRequest) (*UpdatePostResponse, error)
}

type dummyClient struct {
	*client.Client
}

func NewDummyClient(opts ...client.Option) DummyClient {
	return &dummyClient{Client: client.New(opts...)}
}

func (c *dummyClient) CreatePost(ctx context.Context, req *CreatePostRequest) (*CreatePostResponse, error) {
	u, err := url.Parse(fmt.Sprintf("https://jsonplaceholder.typicode.com/posts/%s", req.PostID))
	if err != nil {
		return nil, err
	}

	var res CreatePostResponse
	err = c.Do(ctx, "POST", u, req.Body, &res)
	return &res, err
}

func (c *dummyClient) DeletePost(ctx context.Context, req *DeletePostRequest) (*DeletePostResponse, error) {
	u, err := url.Parse(fmt.Sprintf("https://jsonplaceholder.typicode.com/posts/%s", req.PostID))
	if err != nil {
		return nil, err
	}

	var res DeletePostResponse
	err = c.Do(ctx, "DELETE", u, nil, &res)
	return &res, err
}

func (c *dummyClient) GetPost(ctx context.Context, req *GetPostRequest) (*GetPostResponse, error) {
	query := url.Values{
		"id": []string{req.ID},
	}.Encode()

	u, err := url.Parse("https://jsonplaceholder.typicode.com/posts")
	if err != nil {
		return nil, err
	}

	u.RawQuery = query

	var res GetPostResponse
	err = c.Do(ctx, "GET", u, nil, &res)
	return &res, err
}

func (c *dummyClient) ListPosts(ctx context.Context, req *ListPostsRequest) (*ListPostsResponse, error) {
	u, err := url.Parse("https://jsonplaceholder.typicode.com/posts")
	if err != nil {
		return nil, err
	}

	var res ListPostsResponse
	err = c.Do(ctx, "GET", u, nil, &res)
	return &res, err
}

func (c *dummyClient) UpdatePost(ctx context.Context, req *UpdatePostRequest) (*UpdatePostResponse, error) {
	u, err := url.Parse("https://jsonplaceholder.typicode.com/posts")
	if err != nil {
		return nil, err
	}

	var res UpdatePostResponse
	err = c.Do(ctx, "POST", u, req.Body, &res)
	return &res, err
}

type CreatePostRequest struct {
	PostID string
	Body   *CreatePostRequestBody
}

type CreatePostRequestBody struct {
	Body   string  `json:"body,omitempty"`
	Title  string  `json:"title,omitempty"`
	UserID float64 `json:"userId,omitempty"`
}

type CreatePostResponse struct{}

type DeletePostRequest struct {
	PostID string
}

type DeletePostResponse struct{}

type GetPostRequest struct {
	ID string
}

type GetPostResponse []struct {
	Body   string  `json:"body,omitempty"`
	ID     float64 `json:"id,omitempty"`
	Title  string  `json:"title,omitempty"`
	UserID float64 `json:"userId,omitempty"`
}

type ListPostsRequest struct{}

type ListPostsResponse []struct {
	Body   string  `json:"body,omitempty"`
	ID     float64 `json:"id,omitempty"`
	Title  string  `json:"title,omitempty"`
	UserID float64 `json:"userId,omitempty"`
}

type UpdatePostRequest struct {
	Body *UpdatePostRequestBody
}

type UpdatePostRequestBody struct {
	Body   string  `json:"body,omitempty"`
	Title  string  `json:"title,omitempty"`
	UserID float64 `json:"userId,omitempty"`
}

type UpdatePostResponse struct {
	ID float64 `json:"id,omitempty"`
}
